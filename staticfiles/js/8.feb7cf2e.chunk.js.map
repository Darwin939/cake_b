{"version":3,"sources":["utils/time.js","components/ContainerFluid/index.js","sections/Chat/ChatList/ChatListElement.js","sections/Chat/ChatList/index.js","components/Dialogue/DialogueBody/Message.js","components/Dialogue/DialogueBody/index.js","components/Dialogue/DialogueHeader/index.js","components/Dialogue/DialogueFooter/index.js","sections/Chat/ChatBody/index.js","pages/Chat/index.js"],"names":["timeAgoUnix","UNIX_timestamp","seconds","Math","round","Date","getTime","interval","floor","timeToUnix","ContainerFluid","children","className","ChatListElement","chat","dispatch","useDispatch","unreadMessages","useSelector","store","dialogueID","id","key","style","height","onClick","type","payload","user_id","padding","src","avatar","width","first_name","last_name","maxWidth","textOverflow","overflow","whiteSpace","last_message","content","loading","arr","i","length","from_user_id","checkIfNewMessage","data","index","count","messages","forEach","calculate","ChatList","listChats","useState","page","setPage","useEffect","socket","send","JSON","stringify","command","observer","useRef","lastElementRef","useCallback","node","current","IntersectionObserver","entries","isIntersecting","hasMore","observe","minWidth","minHeight","map","e","ref","Message","message","position","from","username","author","margin","background","color","fontSize","alignSelf","timestamp","DialogueBody","dialogue","newMessages","recipient","flexDirection","find","DialogueHeader","DialogueFooter","handleSendMessage","newMessage","trim","setNewMessage","htmlFor","title","Icon","name","accept","onChange","placeholder","value","target","border","onKeyPress","handlePressKey","ChatBody","Chat","useSocket","connected"],"mappings":"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","file":"static/js/8.feb7cf2e.chunk.js","sourcesContent":["export const timeAgoUnix = (UNIX_timestamp) => {\n  const seconds = Math.round(new Date().getTime() / 1000 - UNIX_timestamp);\n  let interval = Math.floor(seconds / 31536000);\n  let text;\n  if (interval > 1) {\n    return \"больше года назад\";\n  }\n  interval = Math.floor(seconds / 2592000);\n  if (interval > 1) {\n    if (interval === 1) {\n      text = `1 месяц назад`;\n    } else if (interval > 1 && interval < 5) {\n      text = `${interval} месяца назад`;\n    } else {\n      text = `${interval} месяцев назад`;\n    }\n    return text;\n  }\n\n  interval = Math.floor(seconds / 86400);\n  if (interval > 1) {\n    if (interval === 1) {\n      text = `1 день назад`;\n    } else if (interval > 1 && interval < 5) {\n      text = `${interval} дня назад`;\n    } else {\n      text = `${interval} дней назад`;\n    }\n    return text;\n  }\n\n  interval = Math.floor(seconds / 3600);\n  if (interval > 1) {\n    if (interval === 1) {\n      text = `1 час назад`;\n    } else if (interval > 1 && interval < 5) {\n      text = `${interval} часа назад`;\n    } else {\n      text = `${interval} часов назад`;\n    }\n    return text;\n  }\n\n  interval = Math.floor(seconds / 60);\n\n  if (interval > 1) {\n    if (interval === 1) {\n      text = `1 минуту назад`;\n    } else if (interval > 1 && interval < 5) {\n      text = `${interval} минуты назад`;\n    } else {\n      text = `${interval} минут назад`;\n    }\n    return text;\n  }\n  if (seconds > 1) {\n    if (seconds === 1) {\n      text = `1 секунду назад`;\n    } else if (seconds > 1 && seconds < 5) {\n      text = `${seconds} секунды назад`;\n    } else {\n      text = `${seconds} секунд назад`;\n    }\n    return text;\n  }\n};\n\nexport const timeToUnix = (UNIX_timestamp) => {\n  const seconds = new Date().getTime() / 1000 - UNIX_timestamp;\n  let text;\n\n  let interval = Math.floor(seconds / 2592000);\n  if (interval > 1) {\n    if (interval < 2) {\n      text = `через 1 месяц `;\n    } else if (interval > 1 && interval < 5) {\n      text = `через ${interval} месяца`;\n    } else {\n      text = `через ${interval} месяцев`;\n    }\n    return text;\n  }\n\n  interval = Math.floor(seconds / 86400);\n  if (interval > 1) {\n    if (interval < 2) {\n      text = `через 1 день`;\n    } else if (interval > 1 && interval < 5) {\n      text = `через ${interval} дня`;\n    } else {\n      text = `через ${interval} дней`;\n    }\n    return text;\n  }\n\n  return \"сегодня\";\n};\n","import React from \"react\";\n// Если нет правой части\nconst ContainerFluid = ({ children }) => {\n  return (\n    <div className=\"w-100 bg-white rounded mv-20 max-width-990px\">\n      {children}\n    </div>\n  );\n};\n\nexport default ContainerFluid;\n","import React from \"react\";\nimport { timeAgoUnix } from \"../../../utils/time\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n//calculating how many new messages\nconst calculate = (arr, id) => {\n  let index = null;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].from_user_id === id) {\n      index = i;\n    }\n  }\n  let count = 0;\n  arr[index].messages.forEach(() => count++);\n  return count;\n};\n//checking is any new message from this person\nconst checkIfNewMessage = (arr, id) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].from_user_id === id) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst ChatListElement = ({ chat }) => {\n  const dispatch = useDispatch();\n  const unreadMessages = useSelector((store) => store.chat.unreadMessages);\n  const dialogueID = useSelector((store) => store.chat.dialogueID.id);\n  return (\n    <div\n      className=\"w-100 pl-15 d-flex  cursor-pointer hover-whitegray \"\n      key={chat.id}\n      style={{\n        height: \"65px\",\n      }}\n      onClick={() => {\n        dispatch({\n          type: \"SET_DIALOGUE_ID\",\n          payload: chat.user_id,\n        });\n        dispatch({\n          type: \"FETCH_DIALOGUE_MESSAGES_CLEAR\",\n        });\n      }}\n    >\n      <div\n        style={{\n          padding: \"8px 8px 8px 0\",\n        }}\n      >\n        <img\n          className=\"rounded-circle\"\n          src={`${chat.avatar}`}\n          width={50}\n          height={50}\n        />\n      </div>\n      <div className=\"w-100 border-bottom pr-15\">\n        <div\n          style={{\n            padding: \"8px 0\",\n            height: \"100%\",\n          }}\n        >\n          <div className=\"d-flex w-100 justify-content-between\">\n            <div>\n              {chat.first_name} {chat.last_name}\n            </div>\n          </div>\n          <div className=\"d-flex justify-content-between\">\n            <div\n              className=\"text-muted\"\n              style={{\n                maxWidth: \"220px\",\n                textOverflow: \"ellipsis\",\n                overflow: \"hidden\",\n                whiteSpace: \"nowrap\",\n              }}\n            >\n              {chat.last_message.content}\n            </div>\n            {!unreadMessages.loading &&\n              checkIfNewMessage(unreadMessages.data, chat.user_id) &&\n              dialogueID !== chat.user_id && (\n                <div\n                  className=\"ml-10 rounded-circle bg-blue text-white text-align-center mr-20\"\n                  style={{ width: \"20px\", height: \"20px\" }}\n                >\n                  {calculate(unreadMessages.data, chat.user_id)}\n                </div>\n              )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatListElement;\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { socket } from \"../../../store/socket\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ChatListElement from \"./ChatListElement\";\nconst ChatList = () => {\n  const dispatch = useDispatch();\n  const listChats = useSelector((store) => store.chat.listChats);\n  const dialogueID = useSelector((store) => store.chat.dialogueID.id);\n  const [page, setPage] = useState(1);\n  //get List CHats\n  useEffect(() => {\n    dispatch({\n      type: \"LIST_CHATS_LOADING\",\n      payload: true,\n    });\n    socket.send(JSON.stringify({ command: \"list_chats\", page: `${page}` }));\n  }, [page]);\n  //infinite scroll\n  const observer = useRef();\n  const lastElementRef = useCallback(\n    (node) => {\n      if (listChats.loading) return;\n      observer.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting && listChats.hasMore) {\n          setPage(page + 1);\n        }\n      });\n      if (node) observer.current.observe(node);\n    },\n    [listChats.loading, listChats.hasMore, listChats.data]\n  );\n  return (\n    <div\n      className=\"w-390px d-flex flex-column h-100 position-relative border-right-grey\"\n      style={{ maxWidth: \"330px\", minWidth: \"330px\" }}\n    >\n      <div\n        className=\"h-50px d-flex cursor-select flex-column h-50px font-size-20 text-align-center justify-content-center w-100 border-bottom\"\n        style={{ minHeight: \"50px\" }}\n      >\n        Список диалогов\n      </div>\n      <div\n        className=\"h-100 rounded-left w-100\"\n        style={{ overflow: \"hidden auto\" }}\n      >\n        {listChats.loading\n          ? \"LOADING\"\n          : listChats.data.map((e, i) => (\n              <div ref={lastElementRef} key={i}>\n                <ChatListElement chat={e} />\n              </div>\n            ))}\n        <div className=\"mv-20\" />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatList;\n","import React from \"react\";\nimport { timeToUnix } from \"../../../utils/time\";\n\nconst Message = ({ message, from }) => {\n  const position = from.username === message?.author ? \"start\" : \"end\";\n  return (\n    <div className={`d-flex justify-content-${position}`}>\n      <div\n        className=\"rounded text-break-word\"\n        style={{\n          margin: \" 5px\",\n          maxWidth: \"80%\",\n          background: \"rgb(29, 161, 242)\",\n          color: \"rgb(255, 255, 255)\",\n          padding: \"0.375rem 0.75rem\",\n        }}\n      >\n        {message?.content}\n        <div\n          className=\"d-flex justify-content-end\"\n          style={{\n            fontSize: \"0.7rem\",\n            alignSelf: \"flex-end\",\n            color: \"rgba(250, 250, 250, 0.5)\",\n          }}\n        >\n          <div>{timeToUnix(message?.timestamp)}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport Message from \"./Message\";\nimport { socket } from \"../../../store/socket\";\nimport { useDispatch, useSelector } from \"react-redux\";\nconst DialogueBody = () => {\n  const { dialogue, dialogueID, listChats, newMessages } = useSelector(\n    (store) => store.chat\n  );\n  const dispatch = useDispatch();\n  const [page, setPage] = useState(1);\n  useEffect(() => {\n    if (!dialogue.loading) {\n      dispatch({\n        type: \"FETCH_DIALOGUE_MESSAGES_LOADING\",\n        payload: true,\n      });\n      socket.send(\n        JSON.stringify({\n          command: \"fetch_messages\",\n          recipient: `${dialogueID.id}`,\n          page: `${page}`,\n        })\n      );\n    }\n  }, [page, dialogueID.id]);\n  useEffect(() => {\n    setPage(1);\n  }, [dialogueID.id]);\n  //infinite scroll\n  const observer = useRef();\n  const lastElementRef = useCallback(\n    (node) => {\n      if (dialogue.loading) return;\n      observer.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting && dialogue.hasMore) {\n          setPage(page + 1);\n        }\n      });\n      if (node) observer.current.observe(node);\n    },\n    [dialogue.loading, dialogue.hasMore, dialogue.data, newMessages]\n  );\n  return (\n    <div className=\"h-100 position-relative\">\n      <div className=\"h-100 position-absolute w-100 d-flex flex-column justify-content-end\">\n        <div\n          className=\"h-auto max-height-100 rounded-left p-20 w-100 d-flex\"\n          style={{ overflow: \"hidden scroll\", flexDirection: \"column-reverse\" }}\n        >\n          {!listChats.loading &&\n            dialogue.data?.map((e, i) => {\n              if (i === dialogue.data.length - 5) {\n                return (\n                  <div ref={lastElementRef} key={i}>\n                    <Message\n                      message={e}\n                      from={listChats.data.find(\n                        (e) => e.user_id === dialogueID.id\n                      )}\n                    />\n                  </div>\n                );\n              } else {\n                return (\n                  <div key={i}>\n                    <Message\n                      message={e}\n                      from={listChats.data.find(\n                        (e) => e.user_id === dialogueID.id\n                      )}\n                    />\n                  </div>\n                );\n              }\n            })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DialogueBody;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst DialogueHeader = () => {\n  const listChats = useSelector((store) => store.chat.listChats);\n  const dialogueID = useSelector((store) => store.chat.dialogueID.id);\n  const author = listChats.data.find((e) => e.user_id === dialogueID);\n  return (\n    <div\n      className=\" bg-white z-1 w-100 rounded-right border-bottom d-flex align-items-center\"\n      style={{ minHeight: \"50px\" }}\n    >\n      {listChats.loading ? (\n        \"loading\"\n      ) : (\n        <>\n          <div\n            className=\"ml-20 rounded-circle\"\n            style={{\n              background: `url(${author.avatar}) no-repeat 50% 50% / cover`,\n              width: \"30px\",\n              height: \"30px\",\n            }}\n          />\n          <div className=\"ml-20\">\n            {author.first_name} {author.last_name}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default DialogueHeader;\n","import React, { useState } from \"react\";\nimport Icon from \"../../Icon\";\nimport { socket, useSocket } from \"../../../store/socket\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst DialogueFooter = () => {\n  const chat = useSelector((store) => store.chat);\n  const dispatch = useDispatch();\n  //send Message\n  const handleSendMessage = () => {\n    if (newMessage.trim() === \"\") return;\n    if (!chat.dialogue.loading) {\n      setNewMessage(\"\");\n      socket.send(\n        JSON.stringify({\n          command: \"new_message\",\n          message: newMessage,\n          recipient: chat.dialogueID.id,\n        })\n      );\n    }\n  };\n  //send when press send\n  const handlePressKey = (e) => {\n    if (e.key === \"Enter\") {\n      handleSendMessage();\n    }\n  };\n\n  //\n  const [newMessage, setNewMessage] = useState(\"\");\n  return (\n    <div\n      className=\"position-relative rounded-right border-top d-flex justify-content-between\"\n      style={{ minHeight: \"50px\" }}\n    >\n      <label\n        htmlFor=\"image_uploads\"\n        className=\"cursor-pointer p-10 d-flex align-items-center hover-blue\"\n        title=\"Загрузить изображение\"\n      >\n        <Icon name=\"add-file\" width=\"40px\" height=\"40px\" />\n\n        <input\n          id=\"image_uploads\"\n          accept=\".jpg, .jpeg, .png\"\n          style={{\n            width: \"0px\",\n            height: \"0px\",\n          }}\n          type=\"file\"\n          onChange={(e) => {\n            // const formData = new FormData();\n            // formData.append(\"file\", e.target.files[0]);\n            // dispatch(editProfileAvatar(formData));\n          }}\n        />\n      </label>\n      <input\n        type=\"text\"\n        placeholder=\"Напишите новое сообщение\"\n        value={newMessage}\n        className=\"w-100 m-5 outline-none  border-transparent rounded p-10\"\n        onChange={(e) => {\n          setNewMessage(e.target.value);\n        }}\n        style={{ border: \"1px solid rgb(221, 221, 221)\" }}\n        onKeyPress={(e) => handlePressKey(e)}\n      />\n      <div\n        className=\"cursor-pointer p-10 d-flex align-items-center hover-blue \"\n        title=\"Отправить сообщение\"\n        onClick={() => handleSendMessage()}\n      >\n        <Icon name=\"send\" width=\"40px\" height=\"40px\" />\n      </div>\n    </div>\n  );\n};\n\nexport default DialogueFooter;\n","import React from \"react\";\nimport DialogueBody from \"../../../components/Dialogue/DialogueBody\";\nimport DialogueHeader from \"../../../components/Dialogue/DialogueHeader\";\nimport DialogueFooter from \"../../../components/Dialogue/DialogueFooter\";\nimport { useSelector } from \"react-redux\";\n\nconst ChatBody = () => {\n  return (\n    <div className=\"w-100 h-100 d-flex flex-column justify-content-between position-relative\">\n      {useSelector((store) => store.chat.dialogueID.id) !== 0 ? (\n        <div className=\"h-100 d-flex flex-column position-relative\">\n          <DialogueHeader />\n          <DialogueBody />\n          <DialogueFooter />\n        </div>\n      ) : (\n        <div className=\"h-100 w-100 d-flex justify-content-center align-items-center font-size-20\">\n          Найдите заказ и начните диалог с заказчиком\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatBody;\n","import React, { useEffect } from \"react\";\nimport ContainerFluid from \"../../components/ContainerFluid\";\nimport { useSocket } from \"../../store/socket\";\nimport ChatList from \"../../sections/Chat/ChatList\";\nimport ChatBody from \"../../sections/Chat/ChatBody\";\nimport { useDispatch } from \"react-redux\";\n\nconst Chat = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch({\n      type: \"LIST_CHATS_DATA_CLEAR\",\n    });\n  }, []);\n\n  return useSocket().store.connected ? (\n    <ContainerFluid>\n      <div className=\"d-flex h-100 rounded\">\n        <ChatList />\n        <ChatBody />\n      </div>\n    </ContainerFluid>\n  ) : (\n    <div className=\"text-white font-size-24 mt-20\">\n      Не удалось подключится к серверу\n    </div>\n  );\n};\n\nexport default Chat;\n"],"sourceRoot":""}